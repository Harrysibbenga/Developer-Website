---
// src/pages/index.astro
/**
 * Homepage for Harry Sibbenga Web Development Services
 * Features hero section, services, tech stack, portfolio preview, and contact CTA
 */

import Layout from '../layouts/Layout.astro'
import Hero from '../components/sections/Hero.astro'
import Services from '../components/sections/Services.astro' 
import TechStack from '../components/sections/TechStack.astro'
import ProjectGallery from '../components/sections/ProjectGallery.astro'
import Testimonials from '../components/sections/Testimonials.astro'
import Stats from '../components/sections/Stats.astro'
import CTA from '../components/sections/CTA.astro'
import { BUSINESS_INFO, SEO_CONFIG } from '../utils/constants'

const pageTitle = 'Harry Sibbenga - Python Developer & Web Development Services'
const pageDescription = `Professional Python developer with 5+ years experience in ${BUSINESS_INFO.contact.address.city}. Specializing in web applications, data processing, and real-time systems using Django, Flask, and modern technologies.`

// Structured data for homepage
const structuredData = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": BUSINESS_INFO.fullBusinessName,
  "description": pageDescription,
  "url": SEO_CONFIG.siteUrl,
  "author": {
    "@type": "Person",
    "name": BUSINESS_INFO.name,
    "jobTitle": "Python Developer",
    "description": BUSINESS_INFO.description,
    "email": BUSINESS_INFO.contact.email,
    "telephone": BUSINESS_INFO.contact.phone,
    "url": SEO_CONFIG.siteUrl,
    "sameAs": [
      BUSINESS_INFO.social.github,
      BUSINESS_INFO.social.linkedin
    ],
    "address": {
      "@type": "PostalAddress",
      "streetAddress": `${BUSINESS_INFO.contact.address.street}, ${BUSINESS_INFO.contact.address.area}`,
      "addressLocality": BUSINESS_INFO.contact.address.city,
      "postalCode": BUSINESS_INFO.contact.address.postcode,
      "addressCountry": "GB"
    },
    "knowsAbout": [
      "Python Programming",
      "Django Framework",
      "Flask Framework", 
      "Web Development",
      "Data Processing",
      "Real-time Systems",
      "API Development",
      "Vue.js",
      "PostgreSQL",
      "Docker"
    ]
  },
  "potentialAction": {
    "@type": "SearchAction",
    "target": `${SEO_CONFIG.siteUrl}/portfolio?search={search_term_string}`,
    "query-input": "required name=search_term_string"
  },
  "mainEntity": {
    "@type": "ProfessionalService",
    "name": "Python Development Services",
    "provider": {
      "@type": "Person", 
      "name": BUSINESS_INFO.name
    },
    "serviceType": [
      "Web Application Development",
      "Data Analysis & Processing",
      "Real-time Applications", 
      "Technical Consultation"
    ],
    "areaServed": BUSINESS_INFO.serviceAreas.map(area => ({
      "@type": "City",
      "name": area
    }))
  }
}
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  type="website"
  structuredData={structuredData}
>
  <!-- Hero Section -->
  <Hero />
  
  <!-- Services Overview -->
  <Services />

  <!-- Technology Stack -->
  <TechStack />

  <!-- Featured Projects -->
  <ProjectGallery />
  
  <!-- Statistics Section -->
  <Stats />
  
  <!-- Testimonials -->
  <Testimonials />
  
  <!-- Call to Action -->
  <CTA />
</Layout>

<style>
  /* Custom animations for homepage */
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
  }
  
  @keyframes pulse-glow {
    0%, 100% { 
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    50% { 
      box-shadow: 0 0 30px rgba(59, 130, 246, 0.5);
    }
  }
  
  .animate-float {
    animation: float 3s ease-in-out infinite;
  }
  
  .animate-pulse-glow {
    animation: pulse-glow 2s ease-in-out infinite;
  }
  
  /* Intersection Observer animations */
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.8s ease-out;
  }
  
  .animate-on-scroll.animate-in {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Staggered animations */
  .stagger-animation {
    transition-delay: var(--animation-delay, 0ms);
  }
</style>

<script>
  // Intersection Observer for scroll animations
  document.addEventListener('DOMContentLoaded', () => {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    }
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in')
          
          // Handle staggered animations for child elements
          const staggeredElements = entry.target.querySelectorAll('.stagger-animation')
          staggeredElements.forEach((el, index) => {
            el.style.setProperty('--animation-delay', `${index * 100}ms`)
          })
        }
      })
    }, observerOptions)
    
    // Observe all elements with animation class
    document.querySelectorAll('.animate-on-scroll').forEach((el) => {
      observer.observe(el)
    })
  })
  
  // Performance optimization: Lazy load images
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement
          if (img.dataset.src) {
            img.src = img.dataset.src
            img.classList.remove('loading-skeleton')
            imageObserver.unobserve(img)
          }
        }
      })
    })
    
    document.querySelectorAll('img[data-src]').forEach((img) => {
      imageObserver.observe(img)
    })
  }
  
  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault()
      const target = document.querySelector(this.getAttribute('href'))
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        })
      }
    })
  })
  
  // Add active states to navigation based on scroll position
  const sections = document.querySelectorAll('section[id]')
  const navLinks = document.querySelectorAll('nav a[href^="#"]')
  
  const updateActiveLink = () => {
    const scrollPosition = window.scrollY + 100
    
    sections.forEach((section) => {
      const sectionTop = section.offsetTop
      const sectionHeight = section.offsetHeight
      const sectionId = section.getAttribute('id')
      
      if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
        navLinks.forEach((link) => {
          link.classList.remove('active')
          if (link.getAttribute('href') === `#${sectionId}`) {
            link.classList.add('active')
          }
        })
      }
    })
  }
  
  window.addEventListener('scroll', updateActiveLink)
  updateActiveLink() // Run on page load
</script>
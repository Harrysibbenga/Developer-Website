---
// src/pages/index.astro - Optimized Version
/**
 * Homepage for Harry Sibbenga Web Development Services
 */

import Layout from '../layouts/Layout.astro'
import Hero from '../components/sections/Hero.astro'
import Services from '../components/sections/Services.astro' 
import TechStack from '../components/sections/TechStack.astro'
import ProjectGallery from '../components/sections/ProjectGallery.astro'
import Testimonials from '../components/sections/Testimonials.astro'
import Stats from '../components/sections/Stats.astro'
import CTA from '../components/sections/CTA.astro'
import { BUSINESS_INFO, SEO_CONFIG } from '../utils/constants'

const pageTitle = `${BUSINESS_INFO.fullBusinessName}`
const pageDescription = `Professional Full-Stack developer with 5+ years experience in ${BUSINESS_INFO.contact.address.city}. Specializing in web applications, data processing, and real-time systems using Django, Flask, and modern technologies.`

// Structured data for homepage
const structuredData = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": BUSINESS_INFO.fullBusinessName,
  "description": pageDescription,
  "url": SEO_CONFIG.siteUrl,
  "author": {
    "@type": "Person",
    "name": BUSINESS_INFO.name,
    "jobTitle": "Python Developer",
    "description": BUSINESS_INFO.description,
    "email": BUSINESS_INFO.contact.email,
    "telephone": BUSINESS_INFO.contact.phone,
    "url": SEO_CONFIG.siteUrl,
    "sameAs": [
      BUSINESS_INFO.social.ticktock,
      BUSINESS_INFO.social.instagram,
      BUSINESS_INFO.social.email,
      BUSINESS_INFO.social.linkedin
    ],
    "address": {
      "@type": "PostalAddress",
      "streetAddress": `${BUSINESS_INFO.contact.address.street}, ${BUSINESS_INFO.contact.address.area}`,
      "addressLocality": BUSINESS_INFO.contact.address.city,
      "postalCode": BUSINESS_INFO.contact.address.postcode,
      "addressCountry": "GB"
    },
    "knowsAbout": [
      "Python Programming",
      "Django Framework",
      "Flask Framework", 
      "Web Development",
      "Data Processing",
      "Real-time Systems",
      "API Development",
      "Vue.js",
      "PostgreSQL",
      "Docker"
    ]
  },
  "potentialAction": {
    "@type": "SearchAction",
    "target": `${SEO_CONFIG.siteUrl}/portfolio?search={search_term_string}`,
    "query-input": "required name=search_term_string"
  },
  "mainEntity": {
    "@type": "ProfessionalService",
    "name": "Python Development Services",
    "provider": {
      "@type": "Person", 
      "name": BUSINESS_INFO.name
    },
    "serviceType": [
      "Web Application Development",
      "Data Analysis & Processing",
      "Real-time Applications", 
      "Technical Consultation"
    ],
    "areaServed": BUSINESS_INFO.serviceAreas.map(area => ({
      "@type": "City",
      "name": area
    }))
  }
}
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  type="website"
  structuredData={structuredData}
>
  <!-- Hero Section with enhanced animations -->
  <section class="animate-on-scroll" data-animate="hero">
    <Hero />
  </section>
  
  <!-- Services Overview with staggered cards -->
  <section class="animate-on-scroll" data-animate="stagger">
    <Services />
  </section>

  <!-- Technology Stack with skill bars -->
  <section class="animate-on-scroll" data-animate="skills">
    <TechStack />
  </section>

  <!-- Featured Projects with image lazy loading -->
  <section class="animate-on-scroll" data-animate="gallery">
    <ProjectGallery />
  </section>
  
  <!-- Statistics Section with counter animations -->
  <section class="animate-on-scroll" data-animate="counters">
    <Stats />
  </section>
  
  <!-- Testimonials with card animations -->
  <section class="animate-on-scroll" data-animate="testimonials">
    <Testimonials />
  </section>
  
  <!-- Call to Action with floating button -->
  <section class="animate-on-scroll" data-animate="cta">
    <CTA />
  </section>
</Layout>

<style>
  /* Homepage-specific animations only */
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
  }
  
  @keyframes pulse-glow {
    0%, 100% { 
      box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
    }
    50% { 
      box-shadow: 0 0 30px rgba(59, 130, 246, 0.5);
    }
  }

  @keyframes counter-up {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  /* Homepage-specific utility classes */
  .animate-float {
    animation: float 3s ease-in-out infinite;
  }
  
  .animate-pulse-glow {
    animation: pulse-glow 2s ease-in-out infinite;
  }

  .animate-counter {
    animation: counter-up 0.8s ease-out forwards;
  }
  
  /* Responsive animations - reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .animate-float,
    .animate-pulse-glow {
      animation: none;
    }
    
    .animate-on-scroll {
      opacity: 1;
      transform: none;
      transition: none;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .animate-pulse-glow {
      animation: none;
      box-shadow: 0 0 0 2px currentColor;
    }
  }
</style>

<script>
  // Minimal homepage-specific initialization
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Homepage: Initializing page-specific features...')
    
    // Initialize custom counter animations for stats section
    initializeCounterAnimations()
    
    // Setup homepage-specific performance monitoring
    setupHomepagePerformance()
    
    console.log('Homepage: Page-specific initialization complete')
  })
  
  function initializeCounterAnimations() {
    const statsSection = document.querySelector('[data-animate="counters"]')
    if (!statsSection) return
    
    const counters = statsSection.querySelectorAll('.counter-number')
    
    // Use intersection observer to trigger counter animations
    const counterObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const counter = entry.target as HTMLElement
          const finalValue = parseInt(counter.dataset.count || '0')
          
          animateCounter(counter, finalValue)
          counterObserver.unobserve(counter)
        }
      })
    }, { threshold: 0.5 })
    
    counters.forEach(counter => {
      counterObserver.observe(counter)
    })
  }
  
  function animateCounter(element: HTMLElement, target: number) {
    let current = 0
    const increment = target / 60 // 60 frames for smooth animation
    const duration = 2000 // 2 seconds
    const stepTime = duration / 60
    
    const timer = setInterval(() => {
      current += increment
      if (current >= target) {
        current = target
        clearInterval(timer)
      }
      
      element.textContent = Math.floor(current).toLocaleString()
      element.classList.add('animate-counter')
    }, stepTime)
  }
  
  function setupHomepagePerformance() {
    // Mark homepage-specific performance timing
    if ('performance' in window && 'mark' in performance) {
      performance.mark('homepage-interactive')
    }
    
    // Preload critical hero image if not already loaded
    const heroImage = document.querySelector('.hero-image img') as HTMLImageElement
    if (heroImage && !heroImage.complete) {
      const preloadLink = document.createElement('link')
      preloadLink.rel = 'preload'
      preloadLink.href = heroImage.src
      preloadLink.as = 'image'
      document.head.appendChild(preloadLink)
    }
    
    // Setup critical resource monitoring
    if ('PerformanceObserver' in window) {
      const resourceObserver = new PerformanceObserver((list) => {
        list.getEntries().forEach(entry => {
          if (entry.duration > 1000) {
            console.warn(`Slow resource detected: ${entry.name} (${entry.duration}ms)`)
          }
        })
      })
      
      try {
        resourceObserver.observe({ entryTypes: ['resource'] })
      } catch (e) {
        // Silent fail for unsupported browsers
      }
    }
  }
</script>
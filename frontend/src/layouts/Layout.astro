---
// src/layouts/Layout.astro

import { BUSINESS_INFO, SEO_CONFIG } from '../utils/constants'
import Navigation from '../components/layout/Navigation.astro'
import Footer from '../components/layout/Footer.astro'
import { ViewTransitions } from 'astro:transitions'
import "../styles/global.css";

export interface Props {
  title?: string
  description?: string
  image?: string
  canonical?: string
  noindex?: boolean
  ogType?: 'website' | 'article' | 'product'
  publishedTime?: string
  modifiedTime?: string
  structuredData?: Record<string, any>
}

const { 
  title = '',
  description = SEO_CONFIG.defaultDescription,
  image = SEO_CONFIG.image,
  canonical,
  noindex = false,
  ogType = 'website',
  publishedTime,
  modifiedTime,
  structuredData
} = Astro.props

// Build full title
const fullTitle = title 
  ? `${title} | ${BUSINESS_INFO.name}`
  : SEO_CONFIG.defaultTitle

// Build canonical URL
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site).href

// Build full image URL
const fullImageURL = new URL(image, Astro.site).href

// Merge structured data
const defaultStructuredData = SEO_CONFIG.structuredData
const finalStructuredData = structuredData 
  ? { ...defaultStructuredData, ...structuredData }
  : defaultStructuredData
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="title" content={fullTitle} />
    <meta name="description" content={description} />
    <meta name="author" content={BUSINESS_INFO.name} />
    <meta name="keywords" content={SEO_CONFIG.keywords.join(', ')} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Robots -->
    {noindex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={fullImageURL} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content={BUSINESS_INFO.fullBusinessName} />
    <meta property="og:locale" content="en_GB" />
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={fullImageURL} />
    <meta name="twitter:creator" content={SEO_CONFIG.twitterHandle} />
    <meta name="twitter:site" content={SEO_CONFIG.twitterHandle} />
    
    <!-- Favicon and Icons -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <meta name="theme-color" content="#2563eb" />
    <meta name="msapplication-TileColor" content="#2563eb" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Fonts -->
    <link 
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600;700&display=swap" 
      rel="stylesheet" 
    />
    
    <!-- DNS Prefetch -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(finalStructuredData)} />
    
    <!-- View Transitions -->
    <ViewTransitions />
    
    <!-- Critical CSS for above-the-fold content -->
    <style>
      /* Critical styles for faster loading */
      .loading-skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
      }
      
      @keyframes loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
      
      /* Font loading optimization */
      .font-inter { font-family: 'Inter', system-ui, sans-serif; }
      .font-mono { font-family: 'JetBrains Mono', Monaco, 'Cascadia Code', monospace; }
      
      /* Prevent layout shift */
      .hero-section {
        min-height: 60vh;
      }
      
      /* Smooth scrolling */
      html {
        scroll-behavior: smooth;
      }
      
      /* Focus outline for accessibility */
      :focus-visible {
        outline: 2px solid #3b82f6;
        outline-offset: 2px;
      }
      
      /* Remove outline for mouse users */
      :focus:not(:focus-visible) {
        outline: none;
      }
      
      /* Enhanced animation styles */
      .animate-on-scroll {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      }
      
      .animate-on-scroll.animate-in {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Staggered animations */
      .stagger-animation {
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        transition-delay: var(--animation-delay, 0ms);
      }
      
      .stagger-animation.animate-in {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Loading spinner */
      .loading-spinner {
        border: 2px solid #f3f4f6;
        border-top: 2px solid #2563eb;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      /* Fade in effect for initial load */
      .fade-in {
        opacity: 0;
        animation: fadeIn 0.5s ease-in-out forwards;
      }
      
      @keyframes fadeIn {
        to { opacity: 1; }
      }
    </style>
  </head>
  
  <body class="min-h-screen bg-white font-inter antialiased fade-in">
    <!-- Skip to content link for accessibility -->
    <a 
      href="#main-content" 
      class="sr-only focus:not-sr-only fixed top-4 left-4 z-50 px-4 py-2 bg-blue-600 text-white rounded-lg font-medium transition-all duration-300"
    >
      Skip to main content
    </a>
    
    <!-- Header/Navigation -->
    <Navigation />
    
    <!-- Main Content -->
    <main id="main-content" class="flex-1">
      <slot />
    </main>
    
    <!-- Footer -->
    <Footer />
    
    <!-- Cookie Consent Banner -->
    <div 
      id="cookie-consent" 
      class="fixed bottom-0 left-0 right-0 bg-gray-900 text-white p-4 transform translate-y-full transition-transform duration-300 z-50"
      style="display: none;"
    >
      <div class="max-w-7xl mx-auto flex flex-col sm:flex-row items-center justify-between gap-4">
        <div class="flex-1">
          <p class="text-sm">
            We use cookies to enhance your browsing experience and analyze our traffic. 
            <a href="/cookies" class="underline hover:text-blue-300">Learn more</a>
          </p>
        </div>
        <div class="flex gap-3">
          <button 
            id="cookie-decline"
            class="px-4 py-2 text-sm border border-gray-600 rounded-lg hover:bg-gray-800 transition-colors"
          >
            Decline
          </button>
          <button 
            id="cookie-accept"
            class="px-4 py-2 text-sm bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Accept All
          </button>
        </div>
      </div>
    </div>
    
    <!-- Back to Top Button -->
    <button 
      id="back-to-top"
      class="fixed bottom-6 right-6 w-12 h-12 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-300 opacity-0 invisible"
      aria-label="Back to top"
    >
      <svg class="w-6 h-6 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
      </svg>
    </button>
    
    <!-- Loading Indicator for Page Transitions -->
    <div 
      id="page-loading"
      class="fixed top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-purple-600 transform -translate-x-full transition-transform duration-300 z-50"
      style="display: none;"
    >
    </div>
    
    <!-- Scripts -->
    <script>
      // Global Components Manager - Fixes ALL interactive components including contact page tabs
      class GlobalComponentsManager {
        constructor() {
          this.observers = new Map();
          this.eventListeners = new Map();
          this.initialized = false;
        }

        initialize() {
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.initializeComponents());
          } else {
            this.initializeComponents();
          }
          this.setupPageTransitions();
        }

        initializeComponents() {
          console.log('🚀 GlobalComponentsManager: Initializing all components...');
          this.cleanup();
          
          // Initialize all component types
          this.initializeContactPageTabs(); // THE FIX FOR YOUR CONTACT PAGE!
          this.initializeScrollAnimations();
          this.initializeImageLazyLoading();
          this.initializeFormComponents();
          this.initializeNavigationComponents();
          this.initializeModalComponents();
          this.initializeFilterComponents();
          
          this.initialized = true;
          document.body.classList.add('components-loaded');
          console.log('✅ GlobalComponentsManager: All components initialized successfully');
        }

        setupPageTransitions() {
          document.addEventListener('astro:after-swap', () => {
            console.log('🔄 Page transition detected, reinitializing components...');
            setTimeout(() => {
              this.initializeComponents();
            }, 100);
          });
        }

        // CONTACT PAGE TAB FUNCTIONALITY - THE FIX FOR YOUR ISSUE!
        initializeContactPageTabs() {
          const tabButtons = document.querySelectorAll('.tab-button');
          const tabContents = document.querySelectorAll('.tab-content');

          if (tabButtons.length === 0) return;
          console.log('📋 Initializing contact page tabs...', tabButtons.length, 'buttons found');

          tabButtons.forEach(button => {
            const clickHandler = (e) => {
              e.preventDefault();
              const tabId = e.currentTarget.dataset.tab;
              if (!tabId) return;

              console.log('📋 Tab clicked:', tabId);

              // Remove active class from all buttons
              tabButtons.forEach(btn => {
                btn.classList.remove('active', 'bg-blue-600', 'text-white');
                btn.classList.add('text-gray-600', 'hover:text-gray-900');
              });

              // Add active class to clicked button
              e.currentTarget.classList.add('active', 'bg-blue-600', 'text-white');
              e.currentTarget.classList.remove('text-gray-600', 'hover:text-gray-900');

              // Hide all tab contents
              tabContents.forEach(content => {
                content.classList.add('hidden');
                console.log('Hiding tab:', content.id);
              });

              // Show target tab content
              const targetContent = document.getElementById(`${tabId}-tab`);
              if (targetContent) {
                targetContent.classList.remove('hidden');
                console.log('Showing tab:', targetContent.id);
                
                // Trigger animations for newly visible content
                const animatedElements = targetContent.querySelectorAll('.animate-on-scroll');
                animatedElements.forEach(el => {
                  el.classList.remove('animate-in');
                  setTimeout(() => el.classList.add('animate-in'), 50);
                });
              }

              // Track tab switch
              if (typeof gtag !== 'undefined') {
                gtag('event', 'tab_switch', {
                  event_category: 'Contact',
                  event_label: tabId
                });
              }

              console.log(`📋 Successfully switched to tab: ${tabId}`);
            };

            button.addEventListener('click', clickHandler);
            this.addEventListenerToCleanup('contact-tabs', button, 'click', clickHandler);
          });

          // Set initial active state
          const activeButton = document.querySelector('.tab-button.active');
          if (activeButton && activeButton.dataset.tab) {
            const targetContent = document.getElementById(`${activeButton.dataset.tab}-tab`);
            if (targetContent) {
              targetContent.classList.remove('hidden');
              console.log('📋 Initial active tab set:', activeButton.dataset.tab);
            }
          }
        }

        // Scroll Animations
        initializeScrollAnimations() {
          const animatedElements = document.querySelectorAll('.animate-on-scroll, [data-animate]');
          if (animatedElements.length === 0) return;
          
          console.log('🎭 Initializing scroll animations for', animatedElements.length, 'elements');

          const animationObserver = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add('animate-in');
                const staggeredElements = entry.target.querySelectorAll('.stagger-animation');
                staggeredElements.forEach((el, index) => {
                  setTimeout(() => el.classList.add('animate-in'), index * 100);
                });
                animationObserver.unobserve(entry.target);
              }
            });
          }, { threshold: 0.1, rootMargin: '0px 0px -50px 0px' });

          animatedElements.forEach((el) => {
            el.classList.remove('animate-in');
            animationObserver.observe(el);
          });

          this.observers.set('scroll-animations', animationObserver);
        }

        // Image Lazy Loading
        initializeImageLazyLoading() {
          const lazyImages = document.querySelectorAll('img[data-src]');
          if (lazyImages.length === 0) return;

          console.log('🖼️ Initializing image lazy loading for', lazyImages.length, 'images');

          const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const img = entry.target;
                if (img.dataset.src) {
                  const newImg = new Image();
                  newImg.onload = () => {
                    img.src = img.dataset.src;
                    img.classList.remove('loading-skeleton');
                    img.classList.add('loaded');
                    imageObserver.unobserve(img);
                  };
                  newImg.onerror = () => {
                    img.src = '/images/placeholder.jpg';
                    img.alt = 'Image unavailable';
                    img.classList.remove('loading-skeleton');
                    imageObserver.unobserve(img);
                  };
                  newImg.src = img.dataset.src;
                }
              }
            });
          }, { threshold: 0.1, rootMargin: '50px' });

          lazyImages.forEach((img) => {
            img.classList.add('loading-skeleton');
            imageObserver.observe(img);
          });

          this.observers.set('image-loading', imageObserver);

          // Error handling for regular images
          document.querySelectorAll('img:not([data-src])').forEach(img => {
            img.addEventListener('error', function() {
              this.src = '/images/placeholder.jpg';
              this.alt = 'Image unavailable';
            });
          });
        }

        // Form Components
        initializeFormComponents() {
          const forms = document.querySelectorAll('form[data-validate]');
          if (forms.length === 0) return;

          console.log('📝 Initializing form components for', forms.length, 'forms');

          forms.forEach(form => {
            const submitHandler = (e) => {
              if (!this.validateForm(form)) e.preventDefault();
            };
            form.addEventListener('submit', submitHandler);
            this.addEventListenerToCleanup('forms', form, 'submit', submitHandler);

            // Add field validation
            const inputs = form.querySelectorAll('input, textarea, select');
            inputs.forEach(input => {
              const blurHandler = () => this.validateField(input);
              input.addEventListener('blur', blurHandler);
              this.addEventListenerToCleanup('forms', input, 'blur', blurHandler);
            });
          });
        }

        // Navigation Components  
        initializeNavigationComponents() {
          const mobileMenuButton = document.getElementById('mobile-menu-button');
          const mobileMenu = document.getElementById('mobile-menu');

          if (mobileMenuButton && mobileMenu) {
            console.log('🧭 Initializing navigation components...');

            const toggleHandler = () => {
              const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
              mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
              mobileMenu.classList.toggle('hidden');
              
              const icon = mobileMenuButton.querySelector('svg path');
              if (icon) {
                icon.setAttribute('d', isExpanded ? 'M4 6h16M4 12h16M4 18h16' : 'M6 18L18 6M6 6l12 12');
              }
            };

            mobileMenuButton.addEventListener('click', toggleHandler);
            this.addEventListenerToCleanup('navigation', mobileMenuButton, 'click', toggleHandler);

            // Close menu when clicking outside
            const outsideClickHandler = (e) => {
              const target = e.target;
              if (!mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
                mobileMenu.classList.add('hidden');
                mobileMenuButton.setAttribute('aria-expanded', 'false');
              }
            };

            document.addEventListener('click', outsideClickHandler);
            this.addEventListenerToCleanup('navigation', document, 'click', outsideClickHandler);
          }

          // Smooth scroll for anchor links
          document.querySelectorAll('a[href^="#"]').forEach(link => {
            const clickHandler = (e) => {
              e.preventDefault();
              const targetId = e.currentTarget.getAttribute('href')?.substring(1);
              const targetElement = targetId ? document.getElementById(targetId) : null;
              
              if (targetElement) {
                const headerOffset = 80;
                const elementPosition = targetElement.getBoundingClientRect().top;
                const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
                
                window.scrollTo({ top: offsetPosition, behavior: 'smooth' });
              }
            };
            link.addEventListener('click', clickHandler);
            this.addEventListenerToCleanup('navigation', link, 'click', clickHandler);
          });
        }

        // Modal Components
        initializeModalComponents() {
          const modalTriggers = document.querySelectorAll('[data-modal-target]');
          const modalCloses = document.querySelectorAll('[data-modal-close]');
          const modals = document.querySelectorAll('[data-modal]');

          if (modalTriggers.length === 0) return;
          console.log('🪟 Initializing modal components...');

          // Modal open triggers
          modalTriggers.forEach(trigger => {
            const clickHandler = (e) => {
              e.preventDefault();
              const target = e.currentTarget.dataset.modalTarget;
              const modal = document.querySelector(`[data-modal="${target}"]`);
              
              if (modal) {
                modal.classList.remove('hidden');
                modal.setAttribute('aria-hidden', 'false');
                document.body.classList.add('modal-open');
                
                // Focus first focusable element
                const firstFocusable = modal.querySelector('button, input, select, textarea, [tabindex]:not([tabindex="-1"])');
                if (firstFocusable) {
                  firstFocusable.focus();
                }
              }
            };
            trigger.addEventListener('click', clickHandler);
            this.addEventListenerToCleanup('modals', trigger, 'click', clickHandler);
          });

          // Modal close triggers
          modalCloses.forEach(closeBtn => {
            const clickHandler = () => {
              const modal = closeBtn.closest('[data-modal]');
              if (modal) {
                modal.classList.add('hidden');
                modal.setAttribute('aria-hidden', 'true');
                document.body.classList.remove('modal-open');
              }
            };
            closeBtn.addEventListener('click', clickHandler);
            this.addEventListenerToCleanup('modals', closeBtn, 'click', clickHandler);
          });

          // Close modals on escape
          const escapeHandler = (e) => {
            if (e.key === 'Escape') {
              modals.forEach(modal => {
                if (!modal.classList.contains('hidden')) {
                  modal.classList.add('hidden');
                  modal.setAttribute('aria-hidden', 'true');
                }
              });
              document.body.classList.remove('modal-open');
            }
          };
          document.addEventListener('keydown', escapeHandler);
          this.addEventListenerToCleanup('modals', document, 'keydown', escapeHandler);
        }

        // Filter Components
        initializeFilterComponents() {
          const filterButtons = document.querySelectorAll('[data-filter]');
          if (filterButtons.length === 0) return;

          console.log('🔍 Initializing filter components...');

          filterButtons.forEach(button => {
            const clickHandler = (e) => {
              e.preventDefault();
              const filterValue = e.currentTarget.dataset.filter;

              filterButtons.forEach(btn => btn.classList.remove('active'));
              button.classList.add('active');

              document.querySelectorAll('[data-filter-item]').forEach(item => {
                const itemCategories = item.dataset.filterItem?.split(',') || [];
                
                if (filterValue === 'all' || itemCategories.includes(filterValue)) {
                  item.classList.remove('hidden');
                  item.classList.add('animate-in');
                } else {
                  item.classList.add('hidden');
                  item.classList.remove('animate-in');
                }
              });
            };
            button.addEventListener('click', clickHandler);
            this.addEventListenerToCleanup('filters', button, 'click', clickHandler);
          });
        }

        // Utility Methods
        validateForm(form) {
          let isValid = true;
          const inputs = form.querySelectorAll('input[required], textarea[required]');
          
          inputs.forEach(input => {
            if (!input.value.trim()) {
              this.showFieldError(input, 'This field is required');
              isValid = false;
            } else {
              this.clearFieldError(input);
            }
          });
          
          return isValid;
        }

        validateField(input) {
          this.clearFieldError(input);
          
          if (input.hasAttribute('required') && !input.value.trim()) {
            this.showFieldError(input, 'This field is required');
            return;
          }

          if (input.type === 'email' && input.value) {
            const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailPattern.test(input.value)) {
              this.showFieldError(input, 'Please enter a valid email address');
            }
          }
        }

        showFieldError(input, message) {
          this.clearFieldError(input);
          const errorElement = document.createElement('div');
          errorElement.className = 'field-error text-red-600 text-sm mt-1';
          errorElement.textContent = message;
          input.classList.add('border-red-500');
          input.parentNode?.appendChild(errorElement);
        }

        clearFieldError(input) {
          input.classList.remove('border-red-500');
          const existingError = input.parentNode?.querySelector('.field-error');
          if (existingError) existingError.remove();
        }

        addEventListenerToCleanup(group, element, event, handler) {
          if (!this.eventListeners.has(group)) {
            this.eventListeners.set(group, []);
          }
          this.eventListeners.get(group).push({ element, event, handler });
        }

        cleanup() {
          console.log('🧹 Cleaning up existing components...');
          this.observers.forEach(observer => observer.disconnect());
          this.observers.clear();
          
          this.eventListeners.forEach(listeners => {
            listeners.forEach(({ element, event, handler }) => {
              element.removeEventListener(event, handler);
            });
          });
          this.eventListeners.clear();
        }

        reinitialize() {
          this.initializeComponents();
        }
      }

      // Initialize global components manager
      const globalComponentsManager = new GlobalComponentsManager();
      
      // Layout Manager for layout-specific functionality
      class LayoutManager {
        constructor() {
          this.init();
        }
        
        init() {
          // Initialize layout-specific components
          this.setupBackToTop();
          this.setupCookieConsent();
          this.setupPageTransitions();
          this.setupPerformanceOptimizations();
          
          // Initialize the global components manager
          globalComponentsManager.initialize();
          
          console.log('✅ LayoutManager: Layout components initialized');
        }
        
        setupBackToTop() {
          const backToTopButton = document.getElementById('back-to-top');
          
          if (backToTopButton) {
            const toggleVisibility = () => {
              if (window.pageYOffset > 300) {
                backToTopButton.classList.remove('opacity-0', 'invisible');
                backToTopButton.classList.add('opacity-100', 'visible');
              } else {
                backToTopButton.classList.add('opacity-0', 'invisible');
                backToTopButton.classList.remove('opacity-100', 'visible');
              }
            };
            
            window.addEventListener('scroll', toggleVisibility);
            
            backToTopButton.addEventListener('click', () => {
              window.scrollTo({
                top: 0,
                behavior: 'smooth'
              });
            });
          }
        }
        
        setupCookieConsent() {
          const cookieConsent = document.getElementById('cookie-consent');
          const cookieAccept = document.getElementById('cookie-accept');
          const cookieDecline = document.getElementById('cookie-decline');
          
          // Check if user has already made a choice
          if (!localStorage.getItem('cookieConsent') && cookieConsent) {
            setTimeout(() => {
              cookieConsent.style.display = 'block';
              cookieConsent.classList.remove('translate-y-full');
            }, 2000);
          }
          
          const hideCookieConsent = () => {
            if (cookieConsent) {
              cookieConsent.classList.add('translate-y-full');
              setTimeout(() => {
                cookieConsent.style.display = 'none';
              }, 300);
            }
          };
          
          if (cookieAccept) {
            cookieAccept.addEventListener('click', () => {
              localStorage.setItem('cookieConsent', 'accepted');
              hideCookieConsent();
              
              // Initialize analytics if accepted
              if (typeof gtag !== 'undefined') {
                gtag('consent', 'update', {
                  'analytics_storage': 'granted'
                });
              }
            });
          }
          
          if (cookieDecline) {
            cookieDecline.addEventListener('click', () => {
              localStorage.setItem('cookieConsent', 'declined');
              hideCookieConsent();
            });
          }
        }
        
        setupPageTransitions() {
          const pageLoading = document.getElementById('page-loading');
          
          // Show loading indicator on navigation
          document.addEventListener('astro:before-preparation', () => {
            if (pageLoading) {
              pageLoading.style.display = 'block';
              pageLoading.classList.remove('-translate-x-full');
            }
          });
          
          // Hide loading indicator when page loads
          document.addEventListener('astro:after-swap', () => {
            if (pageLoading) {
              pageLoading.classList.add('-translate-x-full');
              setTimeout(() => {
                pageLoading.style.display = 'none';
              }, 300);
            }
            
            // The global components manager will handle component reinitialization
            console.log('🔄 Page transition completed, components will be reinitialized');
          });
        }
        
        setupPerformanceOptimizations() {
          // Preload critical resources
          const criticalImages = document.querySelectorAll('img[data-preload]');
          criticalImages.forEach(img => {
            const link = document.createElement('link');
            link.rel = 'preload';
            link.as = 'image';
            link.href = img.src;
            document.head.appendChild(link);
          });
          
          // Performance monitoring
          if ('PerformanceObserver' in window) {
            const perfObserver = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                if (entry.entryType === 'largest-contentful-paint') {
                  console.log('LCP:', entry.startTime);
                }
                if (entry.entryType === 'first-input') {
                  console.log('FID:', entry.processingStart - entry.startTime);
                }
              }
            });
            
            try {
              perfObserver.observe({ entryTypes: ['largest-contentful-paint', 'first-input'] });
            } catch (e) {
              // Fallback for browsers that don't support these metrics
              console.log('Performance monitoring not supported');
            }
          }
        }
      }
      
      // Initialize the layout manager
      new LayoutManager();
      
      // Service Worker registration
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js')
            .then((registration) => {
              console.log('ServiceWorker registration successful');
            })
            .catch((error) => {
              console.log('ServiceWorker registration failed');
            });
        });
      }
      
      // Web Vitals tracking
      function trackWebVitals() {
        if (typeof gtag !== 'undefined') {
          // Core Web Vitals tracking would go here
          // This is a placeholder for analytics integration
        }
      }
      
      // Call web vitals tracking if analytics is enabled
      if (localStorage.getItem('cookieConsent') === 'accepted') {
        trackWebVitals();
      }
      
      // Expose global components manager for debugging
      window.globalComponentsManager = globalComponentsManager;
      
      // Manual reinitialization function (useful for debugging)
      window.reinitializeComponents = () => {
        console.log('🔧 Manual component reinitialization triggered');
        globalComponentsManager.reinitialize();
      };
    </script>
    
    <!-- Google Analytics (conditionally loaded) -->
    <script is:inline>
      // Only load analytics if cookies are accepted
      if (localStorage.getItem('cookieConsent') === 'accepted') {
        // Google Analytics script would go here
        // Example: gtag configuration
      }
    </script>
  </body>
</html>
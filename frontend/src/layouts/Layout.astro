---
// src/layouts/Layout.astro

import { BUSINESS_INFO, SEO_CONFIG } from '../utils/constants'
import Navigation from '../components/layout/Navigation.astro'
import Footer from '../components/layout/Footer.astro'
import { ViewTransitions } from 'astro:transitions'
import "../styles/global.css";

export interface Props {
  title?: string
  description?: string
  image?: string
  canonical?: string
  noindex?: boolean
  ogType?: 'website' | 'article' | 'product'
  publishedTime?: string
  modifiedTime?: string
  structuredData?: Record<string, any>
}

const { 
  title = '',
  description = SEO_CONFIG.defaultDescription,
  image = SEO_CONFIG.image,
  canonical,
  noindex = false,
  ogType = 'website',
  publishedTime,
  modifiedTime,
  structuredData
} = Astro.props

// Build full title
const fullTitle = title 
  ? `${title} | ${BUSINESS_INFO.name}`
  : SEO_CONFIG.defaultTitle

// Build canonical URL
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site).href

// Build full image URL
const fullImageURL = new URL(image, Astro.site).href

// Merge structured data
const defaultStructuredData = SEO_CONFIG.structuredData
const finalStructuredData = structuredData 
  ? { ...defaultStructuredData, ...structuredData }
  : defaultStructuredData

// Get Google Analytics ID from environment variables
const GA_MEASUREMENT_ID = import.meta.env.PUBLIC_GA_MEASUREMENT_ID || 'GA_MEASUREMENT_ID'
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="title" content={fullTitle} />
    <meta name="description" content={description} />
    <meta name="author" content={BUSINESS_INFO.name} />
    <meta name="keywords" content={SEO_CONFIG.keywords.join(', ')} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Robots -->
    {noindex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={fullImageURL} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content={BUSINESS_INFO.fullBusinessName} />
    <meta property="og:locale" content="en_GB" />
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={fullImageURL} />
    <meta name="twitter:creator" content={SEO_CONFIG.twitterHandle} />
    <meta name="twitter:site" content={SEO_CONFIG.twitterHandle} />
    
    <!-- Favicon and Icons -->
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="icon" type="image/png" sizes="16x16" href="/icon-16x16.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/icon-32x32.png" />
    <link rel="icon" type="image/png" sizes="48x48" href="/icon-48x48.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/logo-180.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <meta name="theme-color" content="#2563eb" />
    <meta name="msapplication-TileColor" content="#2563eb" />

    <!-- Adaptive Logo (Light/Dark) -->
    <link rel="icon" href="/logo.svg" type="image/svg+xml" media="(prefers-color-scheme: light)" />
    <link rel="icon" href="/logo-dark.svg" type="image/svg+xml" media="(prefers-color-scheme: dark)" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Fonts -->
    <link 
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600;700&display=swap" 
      rel="stylesheet" 
    />
    
    <!-- DNS Prefetch -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(finalStructuredData)} />
    
    <!-- View Transitions -->
    <ViewTransitions />
    
    <!-- Critical CSS for above-the-fold content -->
    <style>
      /* Critical styles for faster loading */
      .loading-skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
      }
      
      @keyframes loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
      
      /* Font loading optimization */
      .font-inter { font-family: 'Inter', system-ui, sans-serif; }
      .font-mono { font-family: 'JetBrains Mono', Monaco, 'Cascadia Code', monospace; }
      
      /* Prevent layout shift */
      .hero-section { min-height: 60vh; }
      
      /* Smooth scrolling */
      html { scroll-behavior: smooth; }
      
      /* Focus outline for accessibility */
      :focus-visible {
        outline: 2px solid #3b82f6;
        outline-offset: 2px;
      }
      
      /* Remove outline for mouse users */
      :focus:not(:focus-visible) { outline: none; }
      
      /* Enhanced animation styles */
      .animate-on-scroll {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      }
      
      .animate-on-scroll.animate-in {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Staggered animations */
      .stagger-animation {
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        transition-delay: var(--animation-delay, 0ms);
      }
      
      .stagger-animation.animate-in {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Loading spinner */
      .loading-spinner {
        border: 2px solid #f3f4f6;
        border-top: 2px solid #2563eb;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      /* Fade in effect for initial load */
      .fade-in {
        opacity: 0;
        animation: fadeIn 0.5s ease-in-out forwards;
      }
      
      @keyframes fadeIn {
        to { opacity: 1; }
      }
    </style>
  </head>
  
  <body class="min-h-screen bg-white font-inter antialiased fade-in">
    <!-- Skip to content link for accessibility -->
    <a 
      href="#main-content" 
      class="sr-only focus:not-sr-only fixed top-4 left-4 z-50 px-4 py-2 bg-blue-600 text-white rounded-lg font-medium transition-all duration-300"
    >
      Skip to main content
    </a>
    
    <!-- Header/Navigation -->
    <Navigation />
    
    <!-- Main Content -->
    <main id="main-content" class="flex-1">
      <slot />
    </main>
    
    <!-- Footer -->
    <Footer />
    
    <!-- Cookie Consent Banner -->
    <div 
      id="cookie-consent-banner" 
      class="fixed bottom-0 left-0 right-0 bg-gray-900 text-white p-4 transform translate-y-full transition-transform duration-300 z-50 hidden"
    >
      <div class="max-w-7xl mx-auto flex flex-col sm:flex-row items-center justify-between gap-4">
        <div class="flex-1">
          <p class="text-sm">
            We use cookies to enhance your browsing experience and analyze our traffic. 
            <a href="/cookies" class="underline hover:text-blue-300">Learn more</a>
          </p>
        </div>
        <div class="flex gap-3">
          <button 
            id="cookie-customize"
            class="px-4 py-2 text-sm border border-gray-600 rounded-lg hover:bg-gray-800 transition-colors"
          >
            Customize
          </button>
          <button 
            id="cookie-accept-all"
            class="px-4 py-2 text-sm bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Accept All
          </button>
        </div>
      </div>
    </div>

    <!-- Cookie Settings Modal (Global) -->
    <div id="global-cookie-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
      <div class="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-bold text-gray-900">Cookie Settings</h3>
            <button onclick="closeGlobalCookieModal()" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
            </button>
          </div>
          
          <p class="text-gray-600 mb-6">
            Manage your cookie preferences below. Some cookies are essential for the website to function.
          </p>

          <div class="space-y-4">
            <!-- Essential Cookies -->
            <div class="border border-gray-200 rounded-lg p-4">
              <div class="flex justify-between items-center mb-2">
                <h4 class="font-semibold text-gray-900">Essential Cookies</h4>
                <div class="bg-gray-100 px-3 py-1 rounded-full text-sm text-gray-600">
                  Always Active
                </div>
              </div>
              <p class="text-sm text-gray-600">
                These cookies are necessary for the website to function and cannot be switched off.
              </p>
            </div>

            <!-- Analytics Cookies -->
            <div class="border border-gray-200 rounded-lg p-4">
              <div class="flex justify-between items-center mb-2">
                <h4 class="font-semibold text-gray-900">Analytics Cookies</h4>
                <label class="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" id="global-analytics-toggle" class="sr-only peer">
                  <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
              <p class="text-sm text-gray-600">
                Help us understand how visitors use our website to improve user experience.
              </p>
            </div>

            <!-- Performance Cookies -->
            <div class="border border-gray-200 rounded-lg p-4">
              <div class="flex justify-between items-center mb-2">
                <h4 class="font-semibold text-gray-900">Performance Cookies</h4>
                <label class="relative inline-flex items-center cursor-pointer">
                  <input type="checkbox" id="global-performance-toggle" class="sr-only peer">
                  <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>
              <p class="text-sm text-gray-600">
                Used to enhance the performance and functionality of our website.
              </p>
            </div>
          </div>

          <div class="flex flex-col sm:flex-row gap-3 mt-6 pt-6 border-t border-gray-200">
            <button 
              onclick="acceptAllGlobalCookies()" 
              class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors font-medium"
            >
              Accept All
            </button>
            <button 
              onclick="saveGlobalPreferences()" 
              class="flex-1 border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors font-medium"
            >
              Save Preferences
            </button>
            <button 
              onclick="rejectAllGlobalCookies()" 
              class="flex-1 text-gray-600 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Reject All
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Back to Top Button -->
    <button 
      id="back-to-top"
      class="fixed bottom-6 right-6 w-12 h-12 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-300 opacity-0 invisible"
      aria-label="Back to top"
    >
      <svg class="w-6 h-6 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
      </svg>
    </button>
    
    <!-- Loading Indicator for Page Transitions -->
    <div 
      id="page-loading"
      class="fixed top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-purple-600 transform -translate-x-full transition-transform duration-300 z-50"
      style="display: none;"
    >
    </div>
    
    <!-- Scripts -->
    <script define:vars={{ GA_MEASUREMENT_ID }}>
      // Enhanced Application Manager - Production Ready
      class ApplicationManager {
        constructor() {
          this.initialized = false
          // Wait for DOM to be ready
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init())
          } else {
            // Small delay to ensure all elements are rendered
            setTimeout(() => this.init(), 100)
          }
        }
        
        async init() {
          console.log('🚀 Application Manager: Starting initialization...')
          
          try {
            // Initialize core application features
            this.setupApplicationFeatures()
            
            this.initialized = true
            console.log('✅ Application Manager: Fully initialized')
          } catch (error) {
            console.error('❌ Application Manager initialization failed:', error)
          }
        }
        
        setupApplicationFeatures() {
          this.setupBackToTop()
          this.setupCookieConsent()
          this.setupPageTransitions()
          this.setupPerformanceMonitoring()
          this.setupBasicNavigation() // Navigation fallback
        }
        
        setupBasicNavigation() {
          const mobileMenuButton = document.getElementById('mobile-menu-button')
          const mobileMenu = document.getElementById('mobile-menu')
          
          if (mobileMenuButton && mobileMenu) {
            console.log('📱 Setting up basic navigation...')
            
            mobileMenuButton.addEventListener('click', () => {
              const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true'
              
              mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString())
              
              if (!isExpanded) {
                // Show menu
                mobileMenu.classList.remove('hidden')
                
                // Update icon to close icon
                const svg = mobileMenuButton.querySelector('svg path')
                if (svg) {
                  svg.setAttribute('d', 'M6 18L18 6M6 6l12 12')
                }
              } else {
                // Hide menu
                mobileMenu.classList.add('hidden')
                
                // Update icon to hamburger icon
                const svg = mobileMenuButton.querySelector('svg path')
                if (svg) {
                  svg.setAttribute('d', 'M4 6h16M4 12h16M4 18h16')
                }
              }
            })
            
            // Close menu when clicking outside
            document.addEventListener('click', (e) => {
              const target = e.target
              if (!mobileMenuButton.contains(target) && !mobileMenu.contains(target)) {
                mobileMenu.classList.add('hidden')
                mobileMenuButton.setAttribute('aria-expanded', 'false')
                
                // Reset icon to hamburger
                const svg = mobileMenuButton.querySelector('svg path')
                if (svg) {
                  svg.setAttribute('d', 'M4 6h16M4 12h16M4 18h16')
                }
              }
            })
            
            // Close menu when navigating
            const mobileLinks = mobileMenu.querySelectorAll('a')
            mobileLinks.forEach(link => {
              link.addEventListener('click', () => {
                mobileMenu.classList.add('hidden')
                mobileMenuButton.setAttribute('aria-expanded', 'false')
                
                // Reset icon to hamburger
                const svg = mobileMenuButton.querySelector('svg path')
                if (svg) {
                  svg.setAttribute('d', 'M4 6h16M4 12h16M4 18h16')
                }
              })
            })
            
            console.log('✅ Basic navigation initialized')
          } else {
            console.warn('⚠️ Mobile navigation elements not found')
          }
        }
        
        setupBackToTop() {
          const backToTopButton = document.getElementById('back-to-top')
          if (!backToTopButton) return
          
          const toggleVisibility = () => {
            const threshold = 300
            const isVisible = window.pageYOffset > threshold
            
            backToTopButton.classList.toggle('opacity-0', !isVisible)
            backToTopButton.classList.toggle('invisible', !isVisible)
            backToTopButton.classList.toggle('opacity-100', isVisible)
            backToTopButton.classList.toggle('visible', isVisible)
          }
          
          // Throttled scroll handler for better performance
          let ticking = false
          const handleScroll = () => {
            if (!ticking) {
              requestAnimationFrame(() => {
                toggleVisibility()
                ticking = false
              })
              ticking = true
            }
          }
          
          window.addEventListener('scroll', handleScroll, { passive: true })
          
          backToTopButton.addEventListener('click', () => {
            window.scrollTo({ top: 0, behavior: 'smooth' })
          })
        }
        
        setupCookieConsent() {
          // Unified cookie management system
          const banner = document.getElementById('cookie-consent-banner')
          const modal = document.getElementById('global-cookie-modal')
          const customizeBtn = document.getElementById('cookie-customize')
          const acceptAllBtn = document.getElementById('cookie-accept-all')
          const analyticsToggle = document.getElementById('global-analytics-toggle')
          const performanceToggle = document.getElementById('global-performance-toggle')
          
          // Cookie utilities
          const setCookie = (name, value, days) => {
            const expires = new Date()
            expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000))
            document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;SameSite=Lax`
          }
          
          const getCookie = (name) => {
            const nameEQ = name + "="
            const ca = document.cookie.split(';')
            for(let i = 0; i < ca.length; i++) {
              let c = ca[i]
              while (c.charAt(0) === ' ') c = c.substring(1, c.length)
              if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length)
            }
            return null
          }
          
          const deleteCookie = (name) => {
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`
          }

          // Clear all Google Analytics cookies
          const clearAnalyticsCookies = () => {
            const cookiesToDelete = ['_ga', '_ga_' + GA_MEASUREMENT_ID.replace('G-', ''), '_gid', '_gat']
            cookiesToDelete.forEach(deleteCookie)
            
            // Also try to delete any _ga_* cookies by checking all cookies
            document.cookie.split(';').forEach(cookie => {
              const cookieName = cookie.split('=')[0].trim()
              if (cookieName.startsWith('_ga')) {
                deleteCookie(cookieName)
              }
            })
          }
          
          // Default consent state
          let cookieConsent = {
            analytics: false,
            performance: false
          }
          
          // Helper methods - defined as regular functions
          const showCookieBanner = () => {
            if (banner) {
              banner.classList.remove('hidden')
              setTimeout(() => banner.classList.remove('translate-y-full'), 100)
            }
          }
          
          const hideCookieBanner = () => {
            if (banner) {
              banner.classList.add('translate-y-full')
              setTimeout(() => banner.classList.add('hidden'), 300)
            }
          }
          
          const showCookieModal = () => {
            if (modal) {
              modal.classList.remove('hidden')
              document.body.style.overflow = 'hidden'
            }
          }
          
          const hideCookieModal = () => {
            if (modal) {
              modal.classList.add('hidden')
              document.body.style.overflow = 'auto'
            }
          }
          
          const loadAnalytics = () => {
            if (cookieConsent.analytics && GA_MEASUREMENT_ID && GA_MEASUREMENT_ID !== 'GA_MEASUREMENT_ID') {
              // Load Google Analytics
              if (typeof gtag === 'undefined') {
                const script = document.createElement('script')
                script.async = true
                script.src = `https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`
                document.head.appendChild(script)
                
                script.onload = function() {
                  window.dataLayer = window.dataLayer || []
                  function gtag(){dataLayer.push(arguments)}
                  gtag('js', new Date())
                  gtag('config', GA_MEASUREMENT_ID, {
                    anonymize_ip: true,
                    cookie_flags: 'SameSite=Lax;Secure'
                  })
                  window.gtag = gtag
                }
              }
            }
          }
          
          const saveConsentAndHide = () => {
            setCookie('cookie-consent', JSON.stringify(cookieConsent), 365)
            hideCookieBanner()
            hideCookieModal()
            loadAnalytics()
            showNotification('Cookie preferences saved')
          }
          
          const showNotification = (message) => {
            const notification = document.createElement('div')
            notification.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 transition-all duration-300'
            notification.textContent = message
            document.body.appendChild(notification)
            
            setTimeout(() => notification.remove(), 3000)
          }
          
          // Load existing preferences
          const existingConsent = getCookie('cookie-consent')
          if (existingConsent) {
            try {
              cookieConsent = JSON.parse(existingConsent)
              loadAnalytics()
            } catch (e) {
              console.error('Error parsing cookie consent:', e)
            }
          } else {
            // Show banner if no consent recorded
            showCookieBanner()
          }
          
          // Update toggle states
          if (analyticsToggle) analyticsToggle.checked = cookieConsent.analytics
          if (performanceToggle) performanceToggle.checked = cookieConsent.performance
          
          // Banner event listeners
          if (customizeBtn) {
            customizeBtn.addEventListener('click', () => {
              hideCookieBanner()
              showCookieModal()
            })
          }
          
          if (acceptAllBtn) {
            acceptAllBtn.addEventListener('click', () => {
              cookieConsent = { analytics: true, performance: true }
              saveConsentAndHide()
            })
          }
          
          // Make functions global for modal
          window.closeGlobalCookieModal = hideCookieModal
          window.acceptAllGlobalCookies = () => {
            cookieConsent = { analytics: true, performance: true }
            if (analyticsToggle) analyticsToggle.checked = true
            if (performanceToggle) performanceToggle.checked = true
            saveConsentAndHide()
          }
          window.rejectAllGlobalCookies = () => {
            cookieConsent = { analytics: false, performance: false }
            if (analyticsToggle) analyticsToggle.checked = false
            if (performanceToggle) performanceToggle.checked = false
            clearAnalyticsCookies()
            saveConsentAndHide()
          }
          window.saveGlobalPreferences = () => {
            cookieConsent = {
              analytics: analyticsToggle ? analyticsToggle.checked : false,
              performance: performanceToggle ? performanceToggle.checked : false
            }
            if (!cookieConsent.analytics) {
              clearAnalyticsCookies()
            }
            saveConsentAndHide()
          }
          
          // Close modal when clicking outside
          if (modal) {
            modal.addEventListener('click', (e) => {
              if (e.target === modal) hideCookieModal()
            })
          }
        }
        
        setupPageTransitions() {
          const pageLoading = document.getElementById('page-loading')
          
          // Show loading indicator on navigation
          document.addEventListener('astro:before-preparation', () => {
            if (pageLoading) {
              pageLoading.style.display = 'block'
              pageLoading.classList.remove('-translate-x-full')
            }
          })
          
          // Hide loading indicator when page loads
          document.addEventListener('astro:after-swap', () => {
            if (pageLoading) {
              pageLoading.classList.add('-translate-x-full')
              setTimeout(() => {
                pageLoading.style.display = 'none'
              }, 300)
            }
            
            // Reinitialize on page swap
            setTimeout(() => {
              this.init()
            }, 100)
          })
        }
        
        setupPerformanceMonitoring() {
          // Performance monitoring
          if ('PerformanceObserver' in window) {
            const perfObserver = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                if (entry.entryType === 'largest-contentful-paint') {
                  console.log('LCP:', entry.startTime)
                }
                if (entry.entryType === 'first-input') {
                  console.log('FID:', entry.processingStart - entry.startTime)
                }
              }
            })
            
            try {
              perfObserver.observe({ entryTypes: ['largest-contentful-paint', 'first-input'] })
            } catch (e) {
              console.log('Performance monitoring not fully supported')
            }
          }
          
          // Service Worker registration
          if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
              navigator.serviceWorker.register('/sw.js')
                .then(() => console.log('ServiceWorker registered'))
                .catch(() => console.log('ServiceWorker registration failed'))
            })
          }
        }
      }
      
      // Initialize the application with error handling
      try {
        new ApplicationManager()
      } catch (error) {
        console.error('Failed to initialize Application Manager:', error)
        
        // Emergency fallback for navigation
        setTimeout(() => {
          const mobileMenuButton = document.getElementById('mobile-menu-button')
          const mobileMenu = document.getElementById('mobile-menu')
          
          if (mobileMenuButton && mobileMenu) {
            mobileMenuButton.addEventListener('click', () => {
              const isHidden = mobileMenu.classList.contains('hidden')
              mobileMenu.classList.toggle('hidden', !isHidden)
            })
          }
        }, 500)
      }
      
      // Global error handling
      window.addEventListener('error', (e) => {
        if (e.target && e.target.tagName === 'IMG') {
          console.error('Image failed to load:', e.target.src)
          e.target.style.display = 'none'
        }
      }, true)
      
      // Visibility change optimization
      document.addEventListener('visibilitychange', () => {
        const animatedElements = document.querySelectorAll('.animate-float, .animate-pulse-glow')
        const playState = document.hidden ? 'paused' : 'running'
        
        animatedElements.forEach(el => {
          el.style.animationPlayState = playState
        })
      })
    </script>
  </body>
</html>
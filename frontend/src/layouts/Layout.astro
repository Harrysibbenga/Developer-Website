---
// src/layouts/Layout.astro

import { BUSINESS_INFO, SEO_CONFIG } from '../utils/constants'
import Navigation from '../components/layout/Navigation.astro'
import Footer from '../components/layout/Footer.astro'
import { ViewTransitions } from 'astro:transitions'
import "../styles/global.css";

export interface Props {
  title?: string
  description?: string
  image?: string
  canonical?: string
  noindex?: boolean
  ogType?: 'website' | 'article' | 'product'
  publishedTime?: string
  modifiedTime?: string
  structuredData?: Record<string, any>
}

const { 
  title = '',
  description = SEO_CONFIG.defaultDescription,
  image = SEO_CONFIG.image,
  canonical,
  noindex = false,
  ogType = 'website',
  publishedTime,
  modifiedTime,
  structuredData
} = Astro.props

// Build full title
const fullTitle = title 
  ? `${title} | ${BUSINESS_INFO.name}`
  : SEO_CONFIG.defaultTitle

// Build canonical URL
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site).href

// Build full image URL
const fullImageURL = new URL(image, Astro.site).href

// Merge structured data
const defaultStructuredData = SEO_CONFIG.structuredData
const finalStructuredData = structuredData 
  ? { ...defaultStructuredData, ...structuredData }
  : defaultStructuredData
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Primary Meta Tags -->
    <title>{fullTitle}</title>
    <meta name="title" content={fullTitle} />
    <meta name="description" content={description} />
    <meta name="author" content={BUSINESS_INFO.name} />
    <meta name="keywords" content={SEO_CONFIG.keywords.join(', ')} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Robots -->
    {noindex && <meta name="robots" content="noindex, nofollow" />}
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={ogType} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={fullTitle} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={fullImageURL} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content={BUSINESS_INFO.fullBusinessName} />
    <meta property="og:locale" content="en_GB" />
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={fullTitle} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={fullImageURL} />
    <meta name="twitter:creator" content={SEO_CONFIG.twitterHandle} />
    <meta name="twitter:site" content={SEO_CONFIG.twitterHandle} />
    
    <!-- Favicon and Icons -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <meta name="theme-color" content="#2563eb" />
    <meta name="msapplication-TileColor" content="#2563eb" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Fonts -->
    <link 
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@400;500;600;700&display=swap" 
      rel="stylesheet" 
    />
    
    <!-- DNS Prefetch -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(finalStructuredData)} />
    
    <!-- View Transitions -->
    <ViewTransitions />
    
    <!-- Critical CSS for above-the-fold content -->
    <style>
      /* Critical styles for faster loading */
      .loading-skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
      }
      
      @keyframes loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
      }
      
      /* Font loading optimization */
      .font-inter { font-family: 'Inter', system-ui, sans-serif; }
      .font-mono { font-family: 'JetBrains Mono', Monaco, 'Cascadia Code', monospace; }
      
      /* Prevent layout shift */
      .hero-section { min-height: 60vh; }
      
      /* Smooth scrolling */
      html { scroll-behavior: smooth; }
      
      /* Focus outline for accessibility */
      :focus-visible {
        outline: 2px solid #3b82f6;
        outline-offset: 2px;
      }
      
      /* Remove outline for mouse users */
      :focus:not(:focus-visible) { outline: none; }
      
      /* Enhanced animation styles */
      .animate-on-scroll {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      }
      
      .animate-on-scroll.animate-in {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Staggered animations */
      .stagger-animation {
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        transition-delay: var(--animation-delay, 0ms);
      }
      
      .stagger-animation.animate-in {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Loading spinner */
      .loading-spinner {
        border: 2px solid #f3f4f6;
        border-top: 2px solid #2563eb;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        animation: spin 1s linear infinite;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      /* Fade in effect for initial load */
      .fade-in {
        opacity: 0;
        animation: fadeIn 0.5s ease-in-out forwards;
      }
      
      @keyframes fadeIn {
        to { opacity: 1; }
      }
    </style>
  </head>
  
  <body class="min-h-screen bg-white font-inter antialiased fade-in">
    <!-- Skip to content link for accessibility -->
    <a 
      href="#main-content" 
      class="sr-only focus:not-sr-only fixed top-4 left-4 z-50 px-4 py-2 bg-blue-600 text-white rounded-lg font-medium transition-all duration-300"
    >
      Skip to main content
    </a>
    
    <!-- Header/Navigation -->
    <Navigation />
    
    <!-- Main Content -->
    <main id="main-content" class="flex-1">
      <slot />
    </main>
    
    <!-- Footer -->
    <Footer />
    
    <!-- Cookie Consent Banner -->
    <div 
      id="cookie-consent" 
      class="fixed bottom-0 left-0 right-0 bg-gray-900 text-white p-4 transform translate-y-full transition-transform duration-300 z-50"
      style="display: none;"
    >
      <div class="max-w-7xl mx-auto flex flex-col sm:flex-row items-center justify-between gap-4">
        <div class="flex-1">
          <p class="text-sm">
            We use cookies to enhance your browsing experience and analyze our traffic. 
            <a href="/cookies" class="underline hover:text-blue-300">Learn more</a>
          </p>
        </div>
        <div class="flex gap-3">
          <button 
            id="cookie-decline"
            class="px-4 py-2 text-sm border border-gray-600 rounded-lg hover:bg-gray-800 transition-colors"
          >
            Decline
          </button>
          <button 
            id="cookie-accept"
            class="px-4 py-2 text-sm bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
          >
            Accept All
          </button>
        </div>
      </div>
    </div>
    
    <!-- Back to Top Button -->
    <button 
      id="back-to-top"
      class="fixed bottom-6 right-6 w-12 h-12 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all duration-300 opacity-0 invisible"
      aria-label="Back to top"
    >
      <svg class="w-6 h-6 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
      </svg>
    </button>
    
    <!-- Loading Indicator for Page Transitions -->
    <div 
      id="page-loading"
      class="fixed top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-purple-600 transform -translate-x-full transition-transform duration-300 z-50"
      style="display: none;"
    >
    </div>
    
    <!-- Scripts -->
    <script>
      // Enhanced Application Manager - Clean and Efficient
      class ApplicationManager {
        constructor() {
          this.initialized = false
          this.init()
        }
        
        async init() {
          console.log('ðŸš€ Application Manager: Starting initialization...')
          
          // Wait for enhanced components manager
          const { enhancedComponentsManager } = await import('/src/utils/enhanced-components-manager.ts')
          
          // Initialize core application features
          this.setupApplicationFeatures()
          
          // Initialize all components
          await enhancedComponentsManager.initialize()
          enhancedComponentsManager.setupPageTransitions()
          
          this.initialized = true
          console.log('âœ… Application Manager: Fully initialized')
        }
        
        setupApplicationFeatures() {
          this.setupBackToTop()
          this.setupCookieConsent()
          this.setupPageTransitions()
          this.setupPerformanceMonitoring()
        }
        
        setupBackToTop() {
          const backToTopButton = document.getElementById('back-to-top')
          if (!backToTopButton) return
          
          const toggleVisibility = () => {
            const threshold = 300
            const isVisible = window.pageYOffset > threshold
            
            backToTopButton.classList.toggle('opacity-0', !isVisible)
            backToTopButton.classList.toggle('invisible', !isVisible)
            backToTopButton.classList.toggle('opacity-100', isVisible)
            backToTopButton.classList.toggle('visible', isVisible)
          }
          
          // Throttled scroll handler for better performance
          let ticking = false
          const handleScroll = () => {
            if (!ticking) {
              requestAnimationFrame(() => {
                toggleVisibility()
                ticking = false
              })
              ticking = true
            }
          }
          
          window.addEventListener('scroll', handleScroll, { passive: true })
          
          backToTopButton.addEventListener('click', () => {
            window.scrollTo({ top: 0, behavior: 'smooth' })
          })
        }
        
        setupCookieConsent() {
          const cookieConsent = document.getElementById('cookie-consent')
          const cookieAccept = document.getElementById('cookie-accept')
          const cookieDecline = document.getElementById('cookie-decline')
          
          // Check if user has already made a choice
          if (!localStorage.getItem('cookieConsent') && cookieConsent) {
            setTimeout(() => {
              cookieConsent.style.display = 'block'
              cookieConsent.classList.remove('translate-y-full')
            }, 2000)
          }
          
          const hideCookieConsent = () => {
            if (cookieConsent) {
              cookieConsent.classList.add('translate-y-full')
              setTimeout(() => {
                cookieConsent.style.display = 'none'
              }, 300)
            }
          }
          
          if (cookieAccept) {
            cookieAccept.addEventListener('click', () => {
              localStorage.setItem('cookieConsent', 'accepted')
              hideCookieConsent()
              
              // Initialize analytics if accepted
              if (typeof gtag !== 'undefined') {
                gtag('consent', 'update', {
                  'analytics_storage': 'granted'
                })
              }
            })
          }
          
          if (cookieDecline) {
            cookieDecline.addEventListener('click', () => {
              localStorage.setItem('cookieConsent', 'declined')
              hideCookieConsent()
            })
          }
        }
        
        setupPageTransitions() {
          const pageLoading = document.getElementById('page-loading')
          
          // Show loading indicator on navigation
          document.addEventListener('astro:before-preparation', () => {
            if (pageLoading) {
              pageLoading.style.display = 'block'
              pageLoading.classList.remove('-translate-x-full')
            }
          })
          
          // Hide loading indicator when page loads
          document.addEventListener('astro:after-swap', () => {
            if (pageLoading) {
              pageLoading.classList.add('-translate-x-full')
              setTimeout(() => {
                pageLoading.style.display = 'none'
              }, 300)
            }
          })
        }
        
        setupPerformanceMonitoring() {
          // Performance monitoring
          if ('PerformanceObserver' in window) {
            const perfObserver = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                if (entry.entryType === 'largest-contentful-paint') {
                  console.log('LCP:', entry.startTime)
                }
                if (entry.entryType === 'first-input') {
                  console.log('FID:', entry.processingStart - entry.startTime)
                }
              }
            })
            
            try {
              perfObserver.observe({ entryTypes: ['largest-contentful-paint', 'first-input'] })
            } catch (e) {
              console.log('Performance monitoring not fully supported')
            }
          }
          
          // Service Worker registration
          if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
              navigator.serviceWorker.register('/sw.js')
                .then(() => console.log('ServiceWorker registered'))
                .catch(() => console.log('ServiceWorker registration failed'))
            })
          }
        }
      }
      
      // Initialize the application
      new ApplicationManager()
      
      // Global error handling
      window.addEventListener('error', (e) => {
        if (e.target && e.target.tagName === 'IMG') {
          console.error('Image failed to load:', e.target.src)
          e.target.style.display = 'none'
        }
      }, true)
      
      // Visibility change optimization
      document.addEventListener('visibilitychange', () => {
        const animatedElements = document.querySelectorAll('.animate-float, .animate-pulse-glow')
        const playState = document.hidden ? 'paused' : 'running'
        
        animatedElements.forEach(el => {
          el.style.animationPlayState = playState
        })
      })
    </script>
    
    <!-- Google Analytics (conditionally loaded) -->
    <script is:inline>
      // Only load analytics if cookies are accepted
      if (localStorage.getItem('cookieConsent') === 'accepted') {
        // Google Analytics script would go here
        // Example: gtag configuration
      }
    </script>
  </body>
</html>